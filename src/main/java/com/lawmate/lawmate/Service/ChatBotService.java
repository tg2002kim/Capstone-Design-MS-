package com.lawmate.lawmate.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lawmate.lawmate.DTO.ChatRequestDto;
import com.lawmate.lawmate.DTO.ChatResponseDto;
import com.lawmate.lawmate.DTO.MessageDto;
import com.lawmate.lawmate.DTO.OpenAiRequest;
import com.lawmate.lawmate.Domain.ConsultationRecord;
import com.lawmate.lawmate.Domain.GptInfo;
import com.lawmate.lawmate.Repository.ConsultationRepository;
import com.lawmate.lawmate.Repository.GptInfoRepository;
import com.lawmate.lawmate.Template.TemplatePromptProvider;
import com.lawmate.lawmate.Template.TemplateType;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import okhttp3.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.regex.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class ChatBotService {

    @Value("${openai.api.key}")
    private String openAiApiKey;

    private final ConsultationRepository consultationRepository;
    private final GptInfoRepository gptInfoRepository;

    private static final String OPENAI_API_URL = "https://api.openai.com/v1/chat/completions";

    public ChatResponseDto processChat(ChatRequestDto request) {
        List<MessageDto> allMessages = new ArrayList<>();

        // ÌÖúÌîåÎ¶øÏù¥ Ïù¥ÎØ∏ Ï∂îÏ≤úÎêú ÏÉÅÌÉúÎùºÎ©¥ Ìï¥Îãπ ÌÖúÌîåÎ¶øÏùò ÏßàÎ¨∏ Ï†ÑÏö© ÌîÑÎ°¨ÌîÑÌä∏ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ ÌîÑÎ°¨ÌîÑÌä∏ ÏÇ¨Ïö©
        String systemPrompt = getSystemPromptByTemplate(request.getConsultationId());
        allMessages.add(new MessageDto("system", systemPrompt));

        // ÏÇ¨Ïö©ÏûêÍ∞Ä Î≥¥ÎÇ∏ ÎåÄÌôî Î©îÏãúÏßÄÎì§ÏùÑ Ïù¥Ïñ¥ Î∂ôÏûÑ
        allMessages.addAll(request.getMessages());

        OpenAiRequest openAiRequest = OpenAiRequest.builder()
                .model("gpt-3.5-turbo")
                .messages(allMessages)
                .build();

        String reply = callOpenAiApi(openAiRequest);

        // JSON Î∏îÎ°ùÏù¥ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÎã§Î©¥ ÏÉÅÎã¥ Ï†ïÎ≥¥ÏôÄ ÏöîÏïΩ Ï†ïÎ≥¥ Ï†ÄÏû•
        if (reply.contains("\"summary\":") && reply.contains("\"issue\":") && reply.contains("\"template\":")) {
            extractAndSaveConsultationInfo(reply, request.getConsultationId());
        }

        // Î∂ÑÍ∏∞Î≥Ñ ÌîÑÎ°¨Ìè¨Ìä∏ Ïù¥ÌõÑ Ïãú ÏöîÏïΩ ÌÖçÏä§Ìä∏ Ï†ÄÏû•
        if (reply.contains("Î™®Îì† Îã®Í≥ÑÎ•º ÏôÑÎ£åÌñàÏäµÎãàÎã§.")) {
            saveDocumentSummary(reply, request.getConsultationId());
        }

        return ChatResponseDto.builder().message(reply).build();
    }

    private String getSystemPromptByTemplate(Long consultationId) {
        ConsultationRecord record = consultationRepository.findById(consultationId)
                .orElseThrow(() -> new IllegalArgumentException("ÏÉÅÎã¥ ID ÏóÜÏùå"));

        String templateName = record.getTemplateName(); // Ïù¥Ï†ú templateName Î¨∏ÏûêÏó¥Îßå ÏÇ¨Ïö©

        if (templateName == null || templateName.isBlank()) {
            log.warn("‚ö†Ô∏è ÌÖúÌîåÎ¶ø Ïù¥Î¶Ñ ÏóÜÏùå ‚Üí Í∏∞Î≥∏ ÌîÑÎ°¨ÌîÑÌä∏ ÏÇ¨Ïö©");
            return getDefaultPrompt();
        }

        try {
            TemplateType type = TemplateType.fromName(templateName); // enum Îß§Ìïë ÏãúÎèÑ
            return TemplatePromptProvider.getPrompt(type);
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è TemplateType enum Îß§Ìïë Ïã§Ìå®: {}", templateName);
            return getDefaultPrompt();
        }
    }

    private String getDefaultPrompt() {
        return """
                    ÎÑàÎäî ÌïúÍµ≠ Î≤ïÎ•† ÏÉÅÎã¥Ïóê ÌäπÌôîÎêú Ï†ÑÎ¨∏ AI Ï±óÎ¥áÏù¥Ïïº.
                    ====================
                    üìå Ï†àÎåÄ ÏßÄÏºúÏïº Ìï† ÏÉÅÎã¥ ÏßÑÌñâ Í∑úÏπô
                    ====================

                    1. ÏÉÅÎã¥ÏùÄ Î∞òÎìúÏãú [1Îã®Í≥Ñ]Î∂ÄÌÑ∞ [5Îã®Í≥Ñ]ÍπåÏßÄ ÏàúÏÑúÎåÄÎ°ú ÏßÑÌñâÌï¥. Ï†àÎåÄ ÏàúÏÑú Í±¥ÎÑàÎõ∞ÏßÄ Îßà.
                    2. ÏÇ¨Ïö©ÏûêÏùò ÏùëÎãµ ÏóÜÏù¥Îäî Îã§Ïùå Îã®Í≥ÑÎ°ú ÎÑòÏñ¥Í∞ÄÏßÄ Îßà.
                    3. ÏßàÎ¨∏ÏùÄ Î∞òÎìúÏãú Ï†ïÏ§ëÌïòÍ≥† ÏûêÏó∞Ïä§Îü¨Ïö¥ Î¨∏Ïû•ÏúºÎ°ú ÏûëÏÑ±Ìï¥.
                    4. ÏßàÎ¨∏ÏùÄ Î∞òÎìúÏãú Ìïú Î≤àÏóê ÌïòÎÇòÏî©Îßå. ÎèôÏãúÏóê Ïó¨Îü¨ Í∞ú Î¨ªÏßÄ Îßà.
                    5. Ï∂úÎ†•ÏùÄ ÎåÄÌôîÌòï Î¨∏Ïû•Îßå ÏÇ¨Ïö©Ìï¥. ÎßàÌÅ¨Îã§Ïö¥, Ìëú, ÏΩîÎìúÎ∏îÎ°ù Ï†àÎåÄ ÏÇ¨Ïö©ÌïòÏßÄ Îßà (ÏòàÏô∏: JSON Ï∂úÎ†• Îã®Í≥ÑÎßå ÌóàÏö©).
                    ====================
                    ‚úÖ Îã®Í≥Ñ Ï†ïÏùò
                    ====================

                    [1Îã®Í≥Ñ] ÏÇ¨Ïö©Ïûê ÏÉÅÌô© ÌååÏïÖ
                    - ÏßÄÍ∏à ÏÇ¨Ïö©ÏûêÍ∞Ä Ïñ¥Îñ§ ÏÉÅÌô©Ïóê Ï≤òÌñàÎäîÏßÄ Í≥µÍ∞êÍ≥º Ìï®Íªò ÏûêÏó∞Ïä§ÎüΩÍ≤å ÏßàÎ¨∏Ìï¥.
                    - Î≤ïÏ†Å Î¨∏Ï†úÏùò Î∞∞Í≤Ω, Î∞úÏÉù ÏãúÏ†ê, ÌîºÌï¥ ÎÇ¥Ïö© Îì±ÏùÑ Î¨ºÏñ¥Î¥êÏïº Ìï¥.
                    - Î∞òÎìúÏãú ÏÇ¨Ïö©ÏûêÎ°úÎ∂ÄÌÑ∞ ÏµúÏÜå 1Í∞ú Ïù¥ÏÉÅÏùò Ï†ïÎ≥¥ ÏùëÎãµÏùÑ Î∞õÎèÑÎ°ù Ïú†ÎèÑÌï¥.
                    - ÏßàÎ¨∏ ÏòàÏãú:
                      - "Í∑∏Îü∞ ÏÉÅÌô©ÏùÄ Ï†ïÎßê ÎãπÌô©Ïä§Îü¨Ïö∞ÏÖ®Í≤†Ïñ¥Ïöî.\n Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Ïñ∏Ï†ú Ïñ¥Îñ§ ÏùºÏù¥ ÏûàÏóàÎäîÏßÄ ÎßêÏîÄÌï¥Ï£ºÏã§ Ïàò ÏûàÏùÑÍπåÏöî?"

                    [2Îã®Í≥Ñ] Î≤ïÏ†Å ÏüÅÏ†ê ÏöîÏïΩ
                    - ÏÇ¨Ïö©ÏûêÏùò ÏÉÅÌô©ÏùÑ Î≤ïÏ†ÅÏúºÎ°ú ÏöîÏïΩÌï¥. Í¥ÄÎ†® Î≤ï Ï°∞Ìï≠Ïù¥ÎÇò ÏüÅÏ†êÏùÑ 1~2Ï§ÑÎ°ú Ï†ïÎ¶¨Ìï¥Ï§ò.
                    - Ïòà: "Ï†ïÎ≥¥ÌÜµÏã†ÎßùÎ≤ï Ï†ú70Ï°∞Ïóê Îî∞Î•∏ Î™ÖÏòàÌõºÏÜêÏ£ÑÍ∞Ä Ï†ÅÏö©Îê† Ïàò ÏûàÏäµÎãàÎã§.\n"
                    - Ïòà: "Î∂ÄÎãπÌï¥Í≥† Ïó¨Î∂ÄÎäî Ìï¥Í≥† ÏÇ¨Ïú†ÏôÄ Ï†àÏ∞®Ïùò Ï†ïÎãπÏÑ±Ïóê Îî∞Îùº ÌåêÎã®Îê©ÎãàÎã§.\n"

                    Í∑∏Î¶¨Í≥† Ï∂úÎ†•ÏùÑ ÎÅùÎÇ¥ÏßÄÎßêÍ≥† 3Îã®Í≥ÑÏôÄ Í∞ôÏù¥ Ï∂úÎ†•Ìï¥ÏïºÌï¥.


                    [3Îã®Í≥Ñ] Î¨∏ÏÑú ÌÖúÌîåÎ¶ø Ï∂îÏ≤ú
                    - 2Îã®Í≥ÑÏóêÏÑú Î∂ÑÏÑùÌïú Î≤ïÏ†Å ÏüÅÏ†êÏóê Ï†ÅÌï©Ìïú ÌÖúÌîåÎ¶øÏùÑ ÏïÑÎûò Ï§ë ÌïòÎÇòÎßå Ï∂îÏ≤úÌï¥Ïïº Ìï¥. Ï†ÅÏ†àÌïòÏßÄ ÏïäÏúºÎ©¥ nullÎ°ú Ï≤òÎ¶¨ÌïòÍ≥† Îã§Î•∏ Ï°∞ÏπòÎ•º Ï†úÏïàÌï¥.
                    ÌÖúÌîåÎ¶ø Î™©Î°ù:
                      1. ÎÇ¥Ïö©Ï¶ùÎ™Ö
                      2. Í≥†ÏÜåÏû•(Î™ÖÏòàÌõºÏÜê)
                      3. ÏßÄÍ∏âÎ™ÖÎ†π Ïù¥ÏùòÏã†Ï≤≠ÏÑú
                      4. Î∂ÄÎèôÏÇ∞ ÏûÑÎåÄÏ∞® Í≥ÑÏïΩÏÑú
                      5. Ïú†Ïñ∏Ïû•
                      6. Í∑ºÎ°úÍ≥ÑÏïΩÏÑú
                      7. Í∏àÏ†ÑÏ∞®Ïö©Ï¶ù

                    - Ï∂îÏ≤ú Î¨∏Íµ¨ Ïòà(Î∞òÎìúÏãú ÏúÑ Ïù¥Î¶ÑÍ≥º ÎòëÍ∞ôÏù¥ Ï∂úÎ†•Ìï¥ÏïºÌï®):
                      -ÏòàÏãú:  "ÌòÑÏû¨ ÏÉÅÌô©ÏóêÎäî 'Í≥†ÏÜåÏû•(Î™ÖÏòàÌõºÏÜê)' ÌÖúÌîåÎ¶øÏù¥ Ï†ÅÌï©Ìï¥ Î≥¥ÏûÖÎãàÎã§.\n Ï†ÄÌù¨Îäî Ïù¥ ÌÖúÌîåÎ¶øÏùÑ Ï†úÍ≥µÌï¥ÎìúÎ¶¥ Ïàò ÏûàÏñ¥Ïöî.\n Ïù¥ Î¨∏ÏÑúÎ•º ÏûêÎèôÏúºÎ°ú ÏûëÏÑ±Ìï¥ÎìúÎ¶¥ÍπåÏöî?"

                    [4Îã®Í≥Ñ] JSON ÏöîÏïΩ Ï∂úÎ†•
                    - ÏÇ¨Ïö©ÏûêÍ∞Ä Î¨∏ÏÑú ÏûëÏÑ±Ïóê ÎèôÏùòÌïòÎ©¥ ÏïÑÎûò ÌòïÏãùÏúºÎ°ú JSONÏùÑ Ï∂úÎ†•Ìï¥. Ï†àÎåÄ ÏÑ§Î™Ö Î∂ôÏù¥ÏßÄ Îßà.
                    - Ï∂úÎ†• ÏòàÏãú:
                      ```json
                      {
                        "summary": ÎåÄÌôî ÎÇ¥Ïö© ÏöîÏïΩ + Î¨∏ÏÑú ÏûëÏÑ±ÏùÑ ÏúÑÌï¥ Íº≠ ÏïåÏïÑÏïºÌï† Ï†ïÎ≥¥ Ìè¨Ìï®,
                        "issue": ÎåÄÌôîÏóêÏÑú ÎßêÌïú Î≤ïÏ†Å Ïù¥ÏäàÎ•º Î∂ÑÎ•òÌïú ÌÇ§ÏõåÎìú,
                        "template": Ï∂îÏ≤úÎêú Î¨∏ÏÑú ÌÖúÌîåÎ¶øÎ™Ö(ÌÖúÌîåÎ¶ø Î™©Î°ù Î™ÖÏóê ÏûàÎäî Í≤ÉÍ≥º ÏùºÏπòÌï¥ÏïºÌï®) ÎòêÎäî null
                      }
                      ```
                    - Ïù¥Ïñ¥ÏÑú "ÏûêÎèô Î¨∏ÏÑú ÏûëÏÑ±ÏùÑ ÏßÑÌñâÌïòÏãúÎ†§Î©¥ Í∞úÏù∏ Ï†ïÎ≥¥ ÏàòÏßëÏóê ÎèôÏùòÌïòÏÖîÏïºÌï©ÎãàÎã§.\n Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßëÏóê ÎèôÏùòÌïòÏãúÎÇòÏöî?"ÎùºÍ≥† Î∞òÎìúÏãú ÏßàÎ¨∏Ìï¥.

                    [5Îã®Í≥Ñ] ÏÉÅÎã¥ Ï¢ÖÎ£å
                    - ÏÇ¨Ïö©ÏûêÍ∞Ä "Í∑∏ÎßåÌï†ÎûòÏöî", "ÏÉÅÎã¥ Ï¢ÖÎ£åÌï†Í≤åÏöî"ÎùºÍ≥† ÎßêÌïòÎ©¥ ÏïÑÎûò Î¨∏Ïû•ÏùÑ Ï∂úÎ†•:
                      - "‚úÖ ÏÉÅÎã¥ÏùÑ Ï¢ÖÎ£åÌïòÍ≤†ÏäµÎãàÎã§. ÎèÑÏõÄÏù¥ ÎêòÏóàÍ∏∏ Î∞îÎûçÎãàÎã§."
                """;
    }

    private String callOpenAiApi(OpenAiRequest requestDto) {
        OkHttpClient client = new OkHttpClient();
        ObjectMapper objectMapper = new ObjectMapper();

        try {
            String jsonBody = objectMapper.writeValueAsString(requestDto);

            Request request = new Request.Builder()
                    .url(OPENAI_API_URL)
                    .addHeader("Authorization", "Bearer " + openAiApiKey)
                    .addHeader("Content-Type", "application/json")
                    .post(RequestBody.create(jsonBody, MediaType.parse("application/json")))
                    .build();

            try (Response response = client.newCall(request).execute()) {
                if (response.isSuccessful()) {
                    String responseBody = response.body().string();
                    JsonNode root = objectMapper.readTree(responseBody);
                    return root.get("choices").get(0).get("message").get("content").asText();
                } else {
                    return "GPT ÏùëÎãµ Ïã§Ìå®: " + response.code() + " - " + response.body().string();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            return "GPT Ìò∏Ï∂ú Ï§ë Ïò§Î•ò Î∞úÏÉù: " + e.getMessage();
        }
    }

    private void extractAndSaveConsultationInfo(String reply, Long consultationId) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            Pattern pattern = Pattern.compile("```json\\s*(\\{.*?})\\s*```|\\{.*?}", Pattern.DOTALL);
            Matcher matcher = pattern.matcher(reply);

            if (matcher.find()) {
                String jsonBlock = matcher.group(1) != null ? matcher.group(1) : matcher.group();
                JsonNode json = mapper.readTree(jsonBlock);

                // ‚úÖ ÏöîÏïΩÏö© JSONÏùº Í≤ΩÏö∞Îßå Ï≤òÎ¶¨
                if (json.has("summary") && json.has("issue") && json.has("template")) {
                    String summary = json.get("summary").asText();
                    String issue = json.get("issue").asText();
                    String templateName = json.get("template").asText();

                    ConsultationRecord record = consultationRepository.findById(consultationId)
                            .orElseThrow(() -> new IllegalArgumentException("ÏÉÅÎã¥ ID ÏóÜÏùå"));

                    record.setConsultation_summary(summary);
                    record.setIssue(issue);
                    record.setTemplateName(templateName);
                    log.info("‚úÖ ÌÖúÌîåÎ¶ø Ïù¥Î¶Ñ Ï†ÄÏû• ÏôÑÎ£å: {}", templateName);

                    log.info("‚úÖ ÏÉÅÎã¥ ÏöîÏïΩ Ï†ÄÏû• ÏôÑÎ£å: {}, {}, {}", summary, issue, templateName);
                    consultationRepository.save(record);
                } else {
                    log.info("‚ÑπÔ∏è summary ÌÇ§Í∞Ä ÏóÜÎäî JSONÏûÖÎãàÎã§. Î¨∏ÏÑú ÌïÑÎìúÎ°ú ÌåêÎã®ÎêòÏñ¥ Î¨¥ÏãúÎê©ÎãàÎã§.");
                }
            }
        } catch (Exception e) {
            log.error("‚ùå ÏÉÅÎã¥ ÏöîÏïΩ Ï†ÄÏû• Ïã§Ìå®", e);
        }
    }

    private void saveDocumentSummary(String reply, Long consultationId) {
        try {
            ConsultationRecord consultation = consultationRepository.findById(consultationId)
                    .orElseThrow(() -> new IllegalArgumentException("ÏÉÅÎã¥ ID ÏóÜÏùå"));

            // GPT ÏùëÎãµÏóêÏÑú JSON Î∏îÎ°ù Ï∂îÏ∂ú
            Pattern jsonPattern = Pattern.compile("```json\\s*(\\{.*?})\\s*```", Pattern.DOTALL);
            Matcher matcher = jsonPattern.matcher(reply);

            String jsonBlock;
            if (matcher.find()) {
                jsonBlock = matcher.group(1).trim();
            } else {
                // Î∞±Ìã± ÏóÜÏù¥ Í∑∏ÎÉ• JSONÏù¥ Î∞îÎ°ú Ïò¨ ÏàòÎèÑ ÏûàÏùå
                int start = reply.indexOf("{");
                int end = reply.lastIndexOf("}");
                if (start != -1 && end != -1 && end > start) {
                    jsonBlock = reply.substring(start, end + 1).trim();
                } else {
                    log.warn("‚úñ JSON Î∏îÎ°ùÏù¥ Ìè¨Ìï®ÎêòÏßÄ ÏïäÏùÄ ÏùëÎãµÏûÖÎãàÎã§.");
                    return;
                }
            }

            GptInfo answer = GptInfo.builder()
                    .consultation(consultation)
                    .document_summary(jsonBlock) // JSON Î¨∏ÏûêÏó¥ Í∑∏ÎåÄÎ°ú Ï†ÄÏû•
                    .build();

            gptInfoRepository.save(answer);
            log.info("‚úÖ Î¨∏ÏÑú JSON ÏöîÏïΩ Ï†ÄÏû• ÏôÑÎ£å:\n{}", jsonBlock);

        } catch (Exception e) {
            log.error("‚ùå Î¨∏ÏÑú ÏöîÏïΩ Ï†ÄÏû• Ï§ë Ïò§Î•ò", e);
        }
    }

    public String callOpenAiForTemplate(String prompt) {
        OpenAiRequest request = OpenAiRequest.builder()
                .model("gpt-3.5-turbo")
                .messages(List.of(new MessageDto("user", prompt)))
                .build();

        return callOpenAiApi(request);
    }
}
